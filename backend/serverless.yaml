# serverless.yml


service: serverless-flask


plugins:
  - serverless-python-requirements
  - serverless-wsgi


custom:
  wsgi:
    app: src/server.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: true


provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1


custom:
  AURORA:
    DB_NAME: aurora${opt:stage, self:provider.stage}
    USERNAME: app
    PASSWORD: apppassword
    HOST:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    VPC_CIDR: 10
  SQS:
    NAME: aurora-queue-${opt:stage, self:provider.stage}

# functions:
#   async_query:
#     handler: src/handler.sqs
#     vpc:
#       securityGroupIds:
#         - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
#       subnetIds:
#         - Ref: ServerlessSubnetA
#         - Ref: ServerlessSubnetB
#         - Ref: ServerlessSubnetC
#     events:
#       - sqs:
#           arn:
#             Fn::GetAtt: [AuroraSQSQueue, Arn]
#           batchSize: 1
#   sync_query:
#     handler: src/handler.query
#     vpc:
#       securityGroupIds:
#         - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
#       subnetIds:
#         - Ref: ServerlessSubnetA
#         - Ref: ServerlessSubnetB
#         - Ref: ServerlessSubnetC
#     events:
#       - http:
#           path: /query
#           method: post
# resources:
#   Resources:
#     AsyncQueryQueue:
#       Type: AWS::SQS::Queue
#       Properties:
#         QueueName: ${self:custom.SQS.NAME}
#     # VPC config
#     ServerlessVPC:
#       Type: AWS::EC2::VPC
#       Properties:
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/16
#         EnableDnsSupport: true
#         EnableDnsHostnames: true
#         InstanceTenancy: default
#     ServerlessSubnetA:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}a
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/24
#     ServerlessSubnetB:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}b
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.1.0/24
#     ServerlessSubnetC:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}c
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.2.0/24
#     # Aurora DB config
#     AuroraSubnetGroup:
#       Type: AWS::RDS::DBSubnetGroup
#       Properties:
#         DBSubnetGroupDescription: "Aurora Subnet Group"
#         SubnetIds:
#           - Ref: ServerlessSubnetA
#           - Ref: ServerlessSubnetB
#           - Ref: ServerlessSubnetC
#     AuroraRDSClusterParameter:
#       Type: AWS::RDS::DBClusterParameterGroup
#       Properties:
#         Description: Parameter group for the Serverless Aurora RDS DB.
#         Family: aurora-mysql5.7
#         Parameters:
#           character_set_database: "utf32"
#     AuroraRDSInstanceParameter:
#       Type: AWS::RDS::DBParameterGroup
#       Properties:
#         Description: Parameter group for the Serverless Aurora RDS DB.
#         Family: aurora-mysql5.7
#         Parameters:
#           sql_mode: IGNORE_SPACE
#           max_connections: 100
#           wait_timeout: 900
#           interactive_timeout: 900
#     AuroraRDSCluster:
#       Type: "AWS::RDS::DBCluster"
#       Properties:
#         MasterUsername: ${self:custom.AURORA.USERNAME}
#         MasterUserPassword: ${self:custom.AURORA.PASSWORD}
#         DBSubnetGroupName:
#           Ref: AuroraSubnetGroup
#         Engine: aurora-mysql
#         EngineVersion: "5.7"
#         DatabaseName: ${self:custom.AURORA.DB_NAME}
#         BackupRetentionPeriod: 3
#         DBClusterParameterGroupName:
#           Ref: AuroraRDSClusterParameter
#         VpcSecurityGroupIds:
#           - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
#     AuroraRDSInstance:
#       Type: "AWS::RDS::DBInstance"
#       Properties:
#         DBInstanceClass: db.t2.medium
#         DBSubnetGroupName:
#           Ref: AuroraSubnetGroup
#         Engine: aurora-mysql
#         EngineVersion: "5.7"
#         PubliclyAccessible: false
#         DBParameterGroupName:
#           Ref: AuroraRDSInstanceParameter
#         DBClusterIdentifier:
#           Ref: AuroraRDSCluster


functions:
  api:
    handler: wsgi_handler.handler
    environment:
      APP_ENV: ${env:APP_ENV}
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'