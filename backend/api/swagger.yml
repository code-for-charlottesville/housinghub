openapi: 3.0.0
info:
  description: >
    Backend to access navigator, landlord, and property information from dynamo
    DB
  version: "0.1.0"
  title: Housing Hub REST Api
  contact:
    email: jkropko@codeforcharlottesville.org
  license:
    name: GPL-3.0

tags:
  - name: navigator
    description: People who help others "navigate" the housing hub system
  - name: landlord
    description: People who own property and wish to lease it
  - name: property
    description: Real property, the actual apartment, condo, or house
  - name: authentication
    description: Logging in, logging out, and site security  

paths:
  /navigator:
    get:
      tags: 
        - navigator
      summary: Retrieves a navigator from the backend DB
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the navigator to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A navigator object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Navigator'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: 
        - navigator      
      summary: Creates navigator if does not already exist.
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Navigator'

      responses:
        '200':
          description: Newly created navigator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Navigator'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: 
        - navigator    
      summary: Update existing navigator.
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Navigator'

      responses:
        '200':
          description: Newly updated navigator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Navigator'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


    delete:
      tags: 
        - navigator    
      summary: Delete existing navigator.
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the navigator to retrieve
          schema:
            type: string

      responses:
        '200':
          description: Newly deleted navigator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Navigator'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /landlord:
    get:
      tags: 
        - landlord    
      summary: Retrieves a landlord from the backend DB
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the landlord to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A landlord object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Landlord'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: 
        - landlord    
      summary: Creates landlord if does not already exist.
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Landlord'

      responses:
        '200':
          description: Newly created landlord
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Landlord'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: 
        - landlord    
      summary: Update existing landlord.
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Landlord'

      responses:
        '200':
          description: Newly updated landlord
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Landlord'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


    delete:
      tags: 
        - landlord    
      summary: Delete existing landlord.
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the landlord to retrieve
          schema:
            type: string

      responses:
        '200':
          description: Newly deleted landlord
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Navigator'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /property:
    get:
      tags: 
        - property    
      summary: Retrieves a property from the backend DB
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the property to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A property object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: 
        - property    
      summary: Creates property if does not already exist.
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'

      responses:
        '200':
          description: Newly created property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: 
        - property    
      summary: Update existing property.
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'

      responses:
        '200':
          description: Newly updated property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


    delete:
      tags: 
        - property    
      summary: Delete existing property.
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the property to retrieve
          schema:
            type: string

      responses:
        '200':
          description: Newly deleted property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Navigator'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags: 
        - authentication    
      summary: creates a new user
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUserRequest'

      responses:
        '200':
          description: Newly created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUserResponse'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: 
        - authentication    
      summary: retrieves a jwt token from the server, acting as user authentication
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginRequest'

      responses:
        '200':
          description: The newly created jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwt'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  

  /auth/status:
    get:
      tags: 
        - authentication    
      summary: Verify if a user's is currently valid and see jwt token payload
      responses:
        '200':
          description: jwt payload for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwtPayload'
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



components:
  schemas:

    createUserRequest:
      type: object
      properties:
        user:
           $ref: '#/components/schemas/User'
        navigator:
           $ref: '#/components/schemas/Navigator'
        landlord:
           $ref: '#/components/schemas/Landlord'                   
        
    createUserResponse:
      type: object
      properties:
        jwt:
           $ref: '#/components/schemas/jwt'
        user:
           $ref: '#/components/schemas/User'


    loginRequest:
      type: object
      properties:
        username:
          type: string
          description: username for the user logging in 
          example: david0124816
        password:
          type: string
          description: password for the user
          example: sercretpassword

    jwt:
      type: object
      properties:
        jwt: 
          type: string
          description: utf-8 encoded jwt token for the user encrypted with HS256
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1ODU0Mjk3NjUsInVpZCI6ImI0OTM1OGZjLTcxMzctMTFlYS1iZDRmLWU0NzBiOGI2MTY4MyIsIm5hbWUiOiJkYXZpZCBnb2xkc3RlaW4ifQ.q6p91KS8iOme-K5baVlVSFBPW8K0kjdSJZ-IWSOF-cw

    jwtPayload:
      type: object
      properties:
        exp:
          type: integer
          description: UTC timestamp when the token will expire
          example: 1585429765
        uuid:
          type: string
          description: UUID of the user in the database
          example: "u-b49358fc-7137-11ea-bd4f-e470b8b61683"
        user_name:
          type: string
          description: user name of the user
          example: david01235
        role:
          type: string
          description: what the user does in this system
          example: "navigator"

    User:
      type: object
      properties:
        id:
          type: string
          description: uuid of the user starting with "u-"
          example: "u-sdf23f-f23joif-sfdh23-sefue"
        user_name:
          type: string
          description: unique username of the user
          example: "david2134"
        role:
          type: string
          description: what the user does in the system
          example: "navigator"
        is_admin:
          type: boolean
          description: is the user an admin in system?
          example: true

    Error:
      type: object
      properties:
        code:
          type: integer
          description: The code of the error.
          example: 500
        error:
          type: string
          description: Explanation of the error.
          example: Internal server error
          
    Navigator:
      type: object
      properties:
        id:
          type: string
          description: The ID of the navigator

    Landlord:
      type: object
      properties:
        id:
          type: string
          description: The ID of the landlord

    Property:
      type: object
      properties:
        landlord_id:
          type: string
          format: uid
          description: ID of landlord
          example: 359627C2-C1E2-4CC3-89BD-3D33E9EC2AAB
        voucher_type_accepted:
          type: array
          items:
            type: string
          description: Types of housing vouchers accepted by the property owner
        voucher_type_not_accepted:
          type: array
          items:
            type: string
          description: Types of housing vouchers not accepted by the property owner
        address:
          type: string
          description: Address where the property is located
          example: 123 Fake St Charlottesville, VA 22903
        zip_code:
          type: string
          description: Zip code where the property is located
          example: 22903
        unit_apt_no:
          type: string
          description: Unit or Aprtment number of the property
          example: B
        property_name: 
          type: string
          description: Name of the property
          example: Foo apartment
        bus_line: 
          type: boolean
          description: Whether the property is near a bus line
          example: true
        school_district:
          type: string
          description: Which school district the property is in
          example: Venable
        wheelchair_accessibility:
          type: boolean
          description: Whether the property is wheelchair acceessible
          example: false
        elevator: 
          type: boolean
          description: Whether the property has an elevator
          example: false
        monthly_rent:
          type: number
          description: Monthly rent for property
          example: 1500
        contact_method: 
          type: array
          items:
            type: string
        is_available:
          type: boolean
          description: Whether the property is currently available
          example: false
        date_first_availaable:
          type: string
          format: date
          description: Date which the property first becomes available
          example: "2020-06-01"
        last_contact_date:
          type: string
          format: date
          description: Last data on which the property owner was contact_method
          example: "2020-04-01"
        potential_month_available:
          type: integer
          minimum: 1
          maximum: 12
          description: What month the property will potentially become available
          example: 3
        bedrooms:
          type: integer
          minimum: 1
          description: Number of bedrooms the property has
        bathrroms:
          type: integer
          minimum: 1
          description: Number of bathrooms the property has
          example: 1
        shared_bathrooms:
          type: integer
          minimum: 0
          description: Number of bathrooms shared with another property
          example: 0
        has_basement: 
          type: boolean
          description: Whether the property has a has_basement
        application_fee:
          type: number
          format: float
          description: Cost to file an application in dollars
          example: 50.00
        deposti:
          type: number
          format: float
          description: Deposit due before moving in
          example: 500.00
        last_month_rent_required:
          type: boolean
          description: whether the last month rent is due in advance
        allow_criminal_records:
          type: boolean
          description: Whether the property owner will rent to tenants with a criminal record 
        listing_date:
          type: string
          format: date
          description: Date the property was listed 
          example: "2020-03-01"
        where_listed:
          type: string
          description: Where the property was orginally listed
          example: Craigslist
        floor:
          type: integer
          minimum: 1
          description: Which building floor the property is on
        housing_type:
          type: string
          description: Type of property. Apartment, house, etc 
          example: Apartment
        year_availble: 
          type: integer
          description: The year the property will be available
          example: 2020
        credit_screening_company:
          type: string
          description: The company used for screening tenant's credit 
          example: Experian
        background_screening_company:
          type: string 
          description: Company used to screen tenant's background 
          example: Joe's Provate Eye, Inc.
        last_contacted_by:
          type: string 
          format: uid 
          description: Last Navigator to make contact with the property owner 
          example: 359627C2-C1E2-4CC3-89BD-3D33E9EC2AAB
