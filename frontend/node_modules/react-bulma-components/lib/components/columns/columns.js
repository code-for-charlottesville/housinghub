"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = _interopRequireDefault(require("../../constants"));

var _column = _interopRequireDefault(require("./components/column"));

var _constants2 = _interopRequireDefault(require("./constants"));

var _modifiers = _interopRequireDefault(require("../../modifiers"));

var _element = _interopRequireDefault(require("../element"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var breakpoints = [null].concat(Object.keys(_constants["default"].BREAKPOINTS).map(function (key) {
  return _constants["default"].BREAKPOINTS[key];
}));
var sizes = [0, 1, 2, 3, 4, 5, 6, 7, 8];

var Columns = function Columns(_ref) {
  var _objectSpread2, _ref2;

  var className = _ref.className,
      breakpoint = _ref.breakpoint,
      gapless = _ref.gapless,
      multiline = _ref.multiline,
      centered = _ref.centered,
      vCentered = _ref.vCentered,
      variableGap = _ref.variableGap,
      props = _objectWithoutProperties(_ref, ["className", "breakpoint", "gapless", "multiline", "centered", "vCentered", "variableGap"]);

  return _react["default"].createElement(_element["default"], _extends({}, props, {
    className: (0, _classnames["default"])(className, 'columns', _objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, "is-".concat(breakpoint), breakpoint), _defineProperty(_objectSpread2, 'is-gapless', gapless), _defineProperty(_objectSpread2, 'is-multiline', multiline), _defineProperty(_objectSpread2, 'is-centered', centered), _defineProperty(_objectSpread2, 'is-vcentered', vCentered), _defineProperty(_objectSpread2, 'is-variable', Object.keys(variableGap).length > 0), _objectSpread2), variableGap ? (_ref2 = {}, _defineProperty(_ref2, "is-".concat(variableGap.touch, "-touch"), variableGap.touch), _defineProperty(_ref2, "is-".concat(variableGap.mobile, "-mobile"), variableGap.mobile), _defineProperty(_ref2, "is-".concat(variableGap.tablet, "-tablet"), variableGap.tablet), _defineProperty(_ref2, "is-".concat(variableGap.desktop, "-desktop"), variableGap.desktop), _defineProperty(_ref2, "is-".concat(variableGap.widescreen, "-widescreen"), variableGap.widescreen), _defineProperty(_ref2, "is-".concat(variableGap.fullhd, "-fullhd"), variableGap.fullhd), _ref2) : {}))
  }));
};

Columns.Column = _column["default"];
Columns.CONSTANTS = _constants2["default"];
Columns.propTypes = _objectSpread({}, _modifiers["default"].propTypes, {
  children: _propTypes["default"].node,
  className: _propTypes["default"].string,
  style: _propTypes["default"].shape({}),
  variableGap: _propTypes["default"].shape(_objectSpread({}, Object.values(_constants["default"].BREAKPOINTS).reduce(function (values, breakpoint) {
    return _objectSpread({}, values, _defineProperty({}, breakpoint, _propTypes["default"].oneOf(sizes)));
  }, {}))),

  /**
   * Breakpoint where columns become stacked.
   */
  breakpoint: _propTypes["default"].oneOf(breakpoints),

  /**
   * `true` to remove space between columns
   */
  gapless: _propTypes["default"].bool,

  /**
   * `true` if you want to use more than one line if you add more column elements that would fit in a single row.
   */
  multiline: _propTypes["default"].bool,

  /**
   * `true` you want the columns inside to be horizontaly centered
   */
  centered: _propTypes["default"].bool,

  /**
   * `true` if you want to vertically align columns
   */
  vCentered: _propTypes["default"].bool
});
Columns.defaultProps = _objectSpread({}, _modifiers["default"].defaultProps, {
  children: null,
  className: undefined,
  style: undefined,
  breakpoint: undefined,
  gapless: false,
  centered: false,
  vCentered: false,
  multiline: true,
  variableGap: {}
});
var _default = Columns;
exports["default"] = _default;
//# sourceMappingURL=columns.js.map