{"version":3,"sources":["../../../../../src/components/form/components/field/field.js"],"names":["Field","className","align","multiline","horizontal","kind","props","k","Label","FieldLabel","Body","FieldBody","propTypes","modifiers","children","PropTypes","node","string","style","shape","renderAs","renderAsShape","oneOf","bool","defaultProps","undefined"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,OAAiE;AAAA;;AAAA,MAA9DC,SAA8D,QAA9DA,SAA8D;AAAA,MAAnDC,KAAmD,QAAnDA,KAAmD;AAAA,MAA5CC,SAA4C,QAA5CA,SAA4C;AAAA,MAAjCC,UAAiC,QAAjCA,UAAiC;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAZC,KAAY;;AAC7E,MAAIC,CAAC,GAAG,IAAR;;AAEA,MAAIF,IAAI,KAAK,QAAb,EAAuB;AACrBE,IAAAA,CAAC,GAAG,YAAJ;AACD,GAFD,MAEO,IAAIF,IAAI,KAAK,OAAb,EAAsB;AAC3BE,IAAAA,CAAC,GAAG,YAAJ;AACD;;AAED,SACE,gCAAC,mBAAD,eACMD,KADN;AAEE,IAAA,SAAS,EAAE,6BAAW,OAAX,EAAoBL,SAApB,4DACLM,CADK,GACCA,CADD,0CAELA,CAFK,cAEAL,KAFA,GAEUK,CAAC,IAAIL,KAFf,0CAGLK,CAHK,iBAGWA,CAAC,KAAK,YAAN,IAAsBJ,SAHjC,gCAIT,eAJS,EAIQC,UAJR;AAFb,KADF;AAWD,CApBD;;AAsBAJ,KAAK,CAACQ,KAAN,GAAcC,sBAAd;AAEAT,KAAK,CAACU,IAAN,GAAaC,qBAAb;AAEAX,KAAK,CAACY,SAAN,qBACKC,sBAAUD,SADf;AAEEE,EAAAA,QAAQ,EAAEC,sBAAUC,IAFtB;AAGEf,EAAAA,SAAS,EAAEc,sBAAUE,MAHvB;AAIEC,EAAAA,KAAK,EAAEH,sBAAUI,KAAV,CAAgB,EAAhB,CAJT;AAKEC,EAAAA,QAAQ,EAAEC,oBALZ;AAMEnB,EAAAA,KAAK,EAAEa,sBAAUO,KAAV,CAAgB,CAAC,UAAD,EAAa,OAAb,CAAhB,CANT;AAOEjB,EAAAA,IAAI,EAAEU,sBAAUO,KAAV,CAAgB,CAAC,QAAD,EAAW,OAAX,CAAhB,CAPR;AAQEnB,EAAAA,SAAS,EAAEY,sBAAUQ,IARvB;AASEnB,EAAAA,UAAU,EAAEW,sBAAUQ;AATxB;AAYAvB,KAAK,CAACwB,YAAN,qBACKX,sBAAUW,YADf;AAEEV,EAAAA,QAAQ,EAAE,IAFZ;AAGEb,EAAAA,SAAS,EAAEwB,SAHb;AAIEP,EAAAA,KAAK,EAAEO,SAJT;AAKEL,EAAAA,QAAQ,EAAE,KALZ;AAMElB,EAAAA,KAAK,EAAEuB,SANT;AAOEpB,EAAAA,IAAI,EAAEoB,SAPR;AAQEtB,EAAAA,SAAS,EAAEsB,SARb;AASErB,EAAAA,UAAU,EAAEqB;AATd;eAYezB,K","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport FieldLabel from './field-label';\nimport FieldBody from './field-body';\nimport modifiers from '../../../../modifiers';\nimport Element from '../../../element';\nimport renderAsShape from '../../../../modifiers/render-as';\n\nconst Field = ({ className, align, multiline, horizontal, kind, ...props }) => {\n  let k = null;\n\n  if (kind === 'addons') {\n    k = 'has-addons';\n  } else if (kind === 'group') {\n    k = 'is-grouped';\n  }\n\n  return (\n    <Element\n      {...props}\n      className={classnames('field', className, {\n        [`${k}`]: k,\n        [`${k}-${align}`]: k && align,\n        [`${k}-multiline`]: k === 'is-grouped' && multiline,\n        'is-horizontal': horizontal,\n      })}\n    />\n  );\n};\n\nField.Label = FieldLabel;\n\nField.Body = FieldBody;\n\nField.propTypes = {\n  ...modifiers.propTypes,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n  renderAs: renderAsShape,\n  align: PropTypes.oneOf(['centered', 'right']),\n  kind: PropTypes.oneOf(['addons', 'group']),\n  multiline: PropTypes.bool,\n  horizontal: PropTypes.bool,\n};\n\nField.defaultProps = {\n  ...modifiers.defaultProps,\n  children: null,\n  className: undefined,\n  style: undefined,\n  renderAs: 'div',\n  align: undefined,\n  kind: undefined,\n  multiline: undefined,\n  horizontal: undefined,\n};\n\nexport default Field;\n"],"file":"field.js"}